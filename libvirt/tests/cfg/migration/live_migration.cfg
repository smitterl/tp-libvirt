- virsh.live_migration:
    type = live_migration
    migration_setup = "yes"
    storage_type = 'nfs'
    setup_local_nfs = 'yes'
    disk_type = "file"
    disk_source_protocol = "netfs"
    mnt_path_name = ${nfs_mount_dir}
    # Console output can only be monitored via virsh console output
    only_pty = True
    take_regular_screendumps = no
    # Extra options to pass after <domain> <desturi>
    virsh_migrate_extra = ""
    # SSH connection time out
    ssh_timeout = 60
    virsh_migrate_dest_state = running
    virsh_migrate_src_state = running
    # Local URI
    virsh_migrate_connect_uri = "qemu:///system"
    image_convert = 'no'
    variants:
        - with_postcopy:
            postcopy_options = "--postcopy --timeout 10 --timeout-postcopy"
            wait_for_event = True
            event_type = "Post-copy"
        - without_postcopy:
            postcopy_options = ""
    variants:
        - p2p_live:
            virsh_migrate_options = "--live --p2p --persistent --verbose"
        - non_p2p_live:
            virsh_migrate_options = "--live --verbose"
        - p2p_live_undefinesource:
            only domjobabort
            virsh_migrate_options = "--live --p2p --persistent --undefinesource --verbose"
    variants:
        - migrateuri:
            migrate_speed = 15
            stress_package = "stress"
            stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 20s"
            action_during_mig = "libvirt_network.check_established"
            action_during_mig_params_exists = "yes"
            variants:
                - with_port:
                    port_to_check = 49157
                    virsh_migrate_extra = "--migrateuri tcp://${migrate_dest_host}:${port_to_check}"
                - default:
                    variants:
                        - ipv4:
                            virsh_migrate_extra = "--migrateuri tcp://${migrate_dest_host}"
                        - ipv6:
                            ipv6_config = "yes"
                            ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
                            ipv6_addr_des = "ENTER.YOUR.IPv6.DESTINATION"
                            virsh_migrate_extra = "--migrateuri tcp://[${ipv6_addr_des}]"
        - listen_address:
            stress_package = "stress"
            stress_args = "--cpu 8 --io 4 --vm 2 --vm-bytes 128M --timeout 20s"
            action_during_mig = "libvirt_network.check_established"
            action_during_mig_params_exists = "yes"
            bandwidth_opt = "--bandwidth 15"
            ipv6_addr_des = "ENTER.YOUR.IPv6.DESTINATION"
            ipv6_addr_src = "ENTER.YOUR.IPv6.SOURCE"
            variants:
                - migrateuri_ipv4_addr:
                    virsh_migrate_migrateuri = "--migrateuri tcp://${migrate_dest_host}"
                - migrateuri_ipv6_addr:
                    ipv6_config = "yes"
                    virsh_migrate_migrateuri = "--migrateuri tcp://[${ipv6_addr_des}]"
            variants:
                - specific_ipv6_addr:
                    virsh_migrate_extra = "${virsh_migrate_migrateuri} --listen-address [${ipv6_addr_des}] ${bandwidth_opt}"
                    migrateuri_ipv4_addr:
                        stress_package = ''
                        status_error = 'yes'
                        err_msg = "unable to connect to server.*Connection refused"
                        action_during_mig = ''
                - all_ipaddrs:
                    variants:
                        - ipv4:
                            virsh_migrate_extra = "${virsh_migrate_migrateuri} --listen-address 0.0.0.0 ${bandwidth_opt}"
                            migrateuri_ipv6_addr:
                                stress_package = ''
                                status_error = 'yes'
                                err_msg = "unable to connect to server.*Connection refused"
                                action_during_mig = ''
                        - ipv6:
                            virsh_migrate_extra = "${virsh_migrate_migrateuri} --listen-address :: ${bandwidth_opt}"
        - domjobabort:
            migrate_again = 'yes'
            wait_for_event = False
            status_error = 'yes'
            err_msg = 'operation aborted: migration out job: canceled by client'
            migrate_again_status_error = 'no'
            vm_state_after_abort = "{'source': 'running', 'target': 'nonexist'}"
            migrate_speed = 10
            check_local_port = 'yes'
            return_port = 'yes'
            action_during_mig = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}, {"func": "virsh.domjobabort", "after_event": "iteration: '1'", "func_param": "'%s' % params.get('migrate_main_vm')"}]'
            action_during_mig_again = '[{"func": "libvirt_network.check_established", "after_event": "iteration: '1'", "func_param": 'params'}]'
